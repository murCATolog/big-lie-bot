// —ñ–º–ø–æ—Ä—Ç—É—î–º–æ –∫–ª–∞—Å Telegraf —ñ–∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ telegraf
import { Telegraf, Markup } from "telegraf";
// —ñ–º–ø–æ—Ä—Ç—É—î–º–æ —Ü–∏—Ç–∞—Ç–∏ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É quotes.json —ñ NodeJS —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç—å –π–æ–≥–æ —è–∫ –æ–± º—î–∫—Ç
import quotes from './quotes.json' with { type: 'json' };

// —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞—Å –±–æ—Ç
class QuoteBot extends Telegraf {
  constructor(token) {
    super(token); // —Ç–æ–∫–µ–Ω –±–æ—Ç—É (–º–µ—Ç–æ–¥ —É—Å–ø–∞–¥–∫–æ–≤–∞–Ω–∏–π –∑ –∫–ª–∞—Å—É Telegraf)
    this.activeGen = true;    // —Å—Ç–∞–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö —Ü–∏—Ç–∞—Ç
    this.quotes = quotes;     // —Ç—É—Ç –æ–± º—î–∫—Ç –∑ —Ü–∏—Ç–∞—Ç–∞–º–∏
    this.quoteIndex = 0;    // —ñ–Ω–¥–µ–∫—Å –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Ü–∏—Ç–∞—Ç–∏
    this.activeUsers = [];    // –º–∞—Å–∏–≤ —é–∑–µ—Ä—ñ–≤, —è–∫—ñ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–≤—Ç–æ–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

    // –ö–ù–û–ü–ö–ò –ë–û–¢–ê
    // –Ω–∞–∑–≤–∏ –∫–Ω–æ–ø–æ–∫
    this.keysNames = {
      generate: '–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç—É. –ü—Ä—ñ –º–Ω—î!',
      on: '–ü—Ä–∏—Å–∏–ª–∞—Ç–∏ 1 —Ü–∏—Ç–∞—Ç—É —â–æ–¥–Ω—è',
      off: '–ù–µ –ø—Ä–∏—Å–∏–ª–∞—Ç–∏ —Ü–∏—Ç–∞—Ç—É —â–æ–¥–Ω—è',
    };

    // –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    this.eventKeys();
    this.timeWatcher();
  }

  // –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –º–µ–Ω—é –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ on/off
  getButtonsMenu() {
    const startKeys = Markup.inlineKeyboard([
      [Markup.button.callback(this.keysNames.generate, 'generate')],
      [Markup.button.callback(this.keysNames.on, 'on')]
    ]);
    const stopKeys = Markup.inlineKeyboard([
      [Markup.button.callback(this.keysNames.generate, 'generate')],
      [Markup.button.callback(this.keysNames.off, 'off')]
    ]);
    return this.activeGen ? stopKeys : startKeys;
  }

  // –æ–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –ø–æ–¥—ñ–π
  eventKeys() {
    this.start(async (context) => {
      try {
        await context.replyWithPhoto({ source: './img/main.jpg' });
      } catch (error) {
        console.log(error);
        context.reply('–£–ø—Å! –ß–æ–º—É—Å—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—å! üò¢ \n–ü–æ–≤—ñ–¥–æ–º –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: \n@murCATolog');
      }
      await context.reply(
        '–î–æ–æ–æ–æ–æ–æ–æ–±—Ä–∏–π –≤–µ—á—ñ—Ä, —Ö–ª–æ–ø—Ü—ñ!\n–Ø –±—É–¥—É –ø—Ä–∏—Å–∏–ª–∞—Ç–∏ —Ç–æ–±—ñ —Ñ—Ä–∞–∑–∏ —à–∏—Ä–æ–∫–æ–≤—ñ–¥–æ–º–∏—Ö —É –≤—É–∑—å–∫–∏—Ö –∫–æ–ª–∞—Ö —à–∞—Ö—Ä–∞—ó–≤\n(—ñ –Ω–µ —Ç—ñ–ª—å–∫–∏).\n–¢–∏ –º–æ–∂–µ—à –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç–∏ –æ–¥—Ä–∞–∑—É –∞–±–æ –∂\n–Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —Ä–∞–∑ –Ω–∞ –¥–æ–±—É.\n–Ñ –ø–∏—Ç–∞–Ω–Ω—è? –ü–∏—à–∏: @murCATolog',
        this.getButtonsMenu()
      );
    });

    this.action('generate', (context) => {
      context.reply(this.getQuote());
    });

    this.action('off', (context) => {
      this.activeGen = false;
      context.reply('–ì–æ–ª–æ–≤—î—à–∫–∞ –í–ò–ú–ö–ù–£–í –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —Ü–∏—Ç–∞—Ç. –¢–∏ –≤—á–∏–Ω–∏–≤ —è–∫ –ø...', this.getButtonsMenu());
    });

    this.action('on', (context) => {
        this.activeGen = true;
        if (!this.activeUsers.includes(context.chat.id)) {
            this.activeUsers.push(context.chat.id);
        };
        context.reply('–ü–æ—Ä—è–¥–æ—á–Ω–æ! –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ü–∏—Ç–∞—Ç –£–í–Ü–ú–ö–ù–ï–ù–ê!', this.getButtonsMenu());
      });
  }

  // –º–µ—Ç–æ–¥ –≤–∏–≤–æ–¥—É —Ü–∏—Ç–∞—Ç–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
  getQuote() {
    if (this.quotes.length > 0) {
        if (this.quoteIndex >= this.quotes.length) {
            this.quoteIndex = 0;
        }
        let quote = `${this.quotes[this.quoteIndex].quote}\n‚Äî ${this.quotes[this.quoteIndex].author}`;
        this.quoteIndex++;
        return quote;
    } else {
        return '–£–ø—Å! –ß–æ–º—É—Å—å —Ü–∏—Ç–∞—Ç–∞ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—å! üò¢ \n–ü–æ–≤—ñ–¥–æ–º –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: \n@murCATolog';
    }
  }
  // –º–µ—Ç–æ–¥, —â–æ —Å–ª—ñ–¥–∫—É—î –∑–∞ —á–∞—Å–æ–º
  timeWatcher() {
    const getHour = () => {
        let currentHour = new Date().getHours();
        return currentHour;
      };
    setInterval(() => {
        getHour();
        if (getHour() >= 10 && getHour() <= 20) {
            this.activeUsers.forEach((id) => {
                this.telegram.sendMessage(id, this.getQuote());
            });

        }
    },3600000);
  };
}

// —Å—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ
const BigLiesBot = new QuoteBot('7570011602:AAG9gpgzgg_MFxJBKVjFBhm99kG79_f9TTU');
BigLiesBot.launch();